//*
// The MIT License (MIT)
// Copyright (c) 2016-2017 Intel Corporation
// Copyright (c) 2023 Omics Data Automation, Inc.
// Copyright (c) 2023 dātma, inc™
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

//*
// Note: Variable names are kept aligned with
// GenomicsDB JSON configuration. If decide to
// change them back to camel case, docs must be
// updated to be consistent
//
// To build, use protocol buffer version >3.2.0 and the following command from base directory:
// $ protoc -Isrc/resources/ --java_out=src/main/java/ src/resources/genomicsdb_import_config.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.7
// source: genomicsdb_import_config.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Partition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Begin     *GenomicsDBColumn `protobuf:"bytes,1,req,name=begin" json:"begin,omitempty"`
	Workspace *string           `protobuf:"bytes,2,opt,name=workspace" json:"workspace,omitempty"`
	// Types that are assignable to Array:
	//
	//	*Partition_ArrayName
	//	*Partition_GenerateArrayNameFromPartitionBounds
	Array             isPartition_Array `protobuf_oneof:"array"`
	VcfOutputFilename *string           `protobuf:"bytes,5,opt,name=vcf_output_filename,json=vcfOutputFilename" json:"vcf_output_filename,omitempty"`
	VcfHeaderFilename *string           `protobuf:"bytes,7,opt,name=vcf_header_filename,json=vcfHeaderFilename" json:"vcf_header_filename,omitempty"`
	End               *GenomicsDBColumn `protobuf:"bytes,6,opt,name=end" json:"end,omitempty"`
}

func (x *Partition) Reset() {
	*x = Partition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_genomicsdb_import_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Partition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Partition) ProtoMessage() {}

func (x *Partition) ProtoReflect() protoreflect.Message {
	mi := &file_genomicsdb_import_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Partition.ProtoReflect.Descriptor instead.
func (*Partition) Descriptor() ([]byte, []int) {
	return file_genomicsdb_import_config_proto_rawDescGZIP(), []int{0}
}

func (x *Partition) GetBegin() *GenomicsDBColumn {
	if x != nil {
		return x.Begin
	}
	return nil
}

func (x *Partition) GetWorkspace() string {
	if x != nil && x.Workspace != nil {
		return *x.Workspace
	}
	return ""
}

func (m *Partition) GetArray() isPartition_Array {
	if m != nil {
		return m.Array
	}
	return nil
}

func (x *Partition) GetArrayName() string {
	if x, ok := x.GetArray().(*Partition_ArrayName); ok {
		return x.ArrayName
	}
	return ""
}

func (x *Partition) GetGenerateArrayNameFromPartitionBounds() bool {
	if x, ok := x.GetArray().(*Partition_GenerateArrayNameFromPartitionBounds); ok {
		return x.GenerateArrayNameFromPartitionBounds
	}
	return false
}

func (x *Partition) GetVcfOutputFilename() string {
	if x != nil && x.VcfOutputFilename != nil {
		return *x.VcfOutputFilename
	}
	return ""
}

func (x *Partition) GetVcfHeaderFilename() string {
	if x != nil && x.VcfHeaderFilename != nil {
		return *x.VcfHeaderFilename
	}
	return ""
}

func (x *Partition) GetEnd() *GenomicsDBColumn {
	if x != nil {
		return x.End
	}
	return nil
}

type isPartition_Array interface {
	isPartition_Array()
}

type Partition_ArrayName struct {
	ArrayName string `protobuf:"bytes,3,opt,name=array_name,json=arrayName,oneof"`
}

type Partition_GenerateArrayNameFromPartitionBounds struct {
	GenerateArrayNameFromPartitionBounds bool `protobuf:"varint,4,opt,name=generate_array_name_from_partition_bounds,json=generateArrayNameFromPartitionBounds,oneof"`
}

func (*Partition_ArrayName) isPartition_Array() {}

func (*Partition_GenerateArrayNameFromPartitionBounds) isPartition_Array() {}

type ImportConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SizePerColumnPartition *int64       `protobuf:"varint,7,req,name=size_per_column_partition,json=sizePerColumnPartition,def=16384" json:"size_per_column_partition,omitempty"`
	RowBasedPartitioning   *bool        `protobuf:"varint,1,opt,name=row_based_partitioning,json=rowBasedPartitioning,def=0" json:"row_based_partitioning,omitempty"`
	ProduceCombinedVcf     *bool        `protobuf:"varint,2,opt,name=produce_combined_vcf,json=produceCombinedVcf,def=0" json:"produce_combined_vcf,omitempty"`
	ProduceTiledbArray     *bool        `protobuf:"varint,3,opt,name=produce_tiledb_array,json=produceTiledbArray,def=1" json:"produce_tiledb_array,omitempty"`
	ColumnPartitions       []*Partition `protobuf:"bytes,4,rep,name=column_partitions,json=columnPartitions" json:"column_partitions,omitempty"`
	// Types that are assignable to VidMappingOptions:
	//
	//	*ImportConfiguration_VidMappingFile
	//	*ImportConfiguration_VidMapping
	VidMappingOptions isImportConfiguration_VidMappingOptions `protobuf_oneof:"vid_mapping_options"`
	// Types that are assignable to CallsetMappingOptions:
	//
	//	*ImportConfiguration_CallsetMappingFile
	//	*ImportConfiguration_CallsetMapping
	CallsetMappingOptions            isImportConfiguration_CallsetMappingOptions `protobuf_oneof:"callset_mapping_options"`
	TreatDeletionsAsIntervals        *bool                                       `protobuf:"varint,8,opt,name=treat_deletions_as_intervals,json=treatDeletionsAsIntervals,def=1" json:"treat_deletions_as_intervals,omitempty"`
	NumParallelVcfFiles              *int32                                      `protobuf:"varint,9,opt,name=num_parallel_vcf_files,json=numParallelVcfFiles,def=1" json:"num_parallel_vcf_files,omitempty"`
	DeleteAndCreateTiledbArray       *bool                                       `protobuf:"varint,10,opt,name=delete_and_create_tiledb_array,json=deleteAndCreateTiledbArray,def=0" json:"delete_and_create_tiledb_array,omitempty"`
	DoPingPongBuffering              *bool                                       `protobuf:"varint,11,opt,name=do_ping_pong_buffering,json=doPingPongBuffering,def=1" json:"do_ping_pong_buffering,omitempty"`
	OffloadVcfOutputProcessing       *bool                                       `protobuf:"varint,12,opt,name=offload_vcf_output_processing,json=offloadVcfOutputProcessing,def=1" json:"offload_vcf_output_processing,omitempty"`
	DiscardVcfIndex                  *bool                                       `protobuf:"varint,13,opt,name=discard_vcf_index,json=discardVcfIndex,def=1" json:"discard_vcf_index,omitempty"`
	SegmentSize                      *int64                                      `protobuf:"varint,14,opt,name=segment_size,json=segmentSize,def=10485760" json:"segment_size,omitempty"`
	CompressTiledbArray              *bool                                       `protobuf:"varint,15,opt,name=compress_tiledb_array,json=compressTiledbArray,def=1" json:"compress_tiledb_array,omitempty"`
	NumCellsPerTile                  *int64                                      `protobuf:"varint,16,opt,name=num_cells_per_tile,json=numCellsPerTile,def=1000" json:"num_cells_per_tile,omitempty"`
	FailIfUpdating                   *bool                                       `protobuf:"varint,17,opt,name=fail_if_updating,json=failIfUpdating,def=0" json:"fail_if_updating,omitempty"`
	TiledbCompressionType            *int32                                      `protobuf:"varint,18,opt,name=tiledb_compression_type,json=tiledbCompressionType,def=1" json:"tiledb_compression_type,omitempty"`
	TiledbCompressionLevel           *int32                                      `protobuf:"varint,19,opt,name=tiledb_compression_level,json=tiledbCompressionLevel,def=-1" json:"tiledb_compression_level,omitempty"`
	ConsolidateTiledbArrayAfterLoad  *bool                                       `protobuf:"varint,20,opt,name=consolidate_tiledb_array_after_load,json=consolidateTiledbArrayAfterLoad,def=0" json:"consolidate_tiledb_array_after_load,omitempty"`
	DisableSyncedWrites              *bool                                       `protobuf:"varint,21,opt,name=disable_synced_writes,json=disableSyncedWrites,def=1" json:"disable_synced_writes,omitempty"`
	IgnoreCellsNotInPartition        *bool                                       `protobuf:"varint,22,opt,name=ignore_cells_not_in_partition,json=ignoreCellsNotInPartition" json:"ignore_cells_not_in_partition,omitempty"`
	LbCallsetRowIdx                  *int64                                      `protobuf:"varint,23,opt,name=lb_callset_row_idx,json=lbCallsetRowIdx,def=0" json:"lb_callset_row_idx,omitempty"`
	UbCallsetRowIdx                  *int64                                      `protobuf:"varint,24,opt,name=ub_callset_row_idx,json=ubCallsetRowIdx" json:"ub_callset_row_idx,omitempty"`
	EnableSharedPosixfsOptimizations *bool                                       `protobuf:"varint,27,opt,name=enable_shared_posixfs_optimizations,json=enableSharedPosixfsOptimizations,def=0" json:"enable_shared_posixfs_optimizations,omitempty"`
	DisableDeltaEncodeForOffsets     *bool                                       `protobuf:"varint,28,opt,name=disable_delta_encode_for_offsets,json=disableDeltaEncodeForOffsets,def=0" json:"disable_delta_encode_for_offsets,omitempty"`
	DisableDeltaEncodeForCoords      *bool                                       `protobuf:"varint,29,opt,name=disable_delta_encode_for_coords,json=disableDeltaEncodeForCoords,def=0" json:"disable_delta_encode_for_coords,omitempty"`
	EnableBitShuffleGt               *bool                                       `protobuf:"varint,30,opt,name=enable_bit_shuffle_gt,json=enableBitShuffleGt,def=0" json:"enable_bit_shuffle_gt,omitempty"`
	EnableLz4CompressionGt           *bool                                       `protobuf:"varint,31,opt,name=enable_lz4_compression_gt,json=enableLz4CompressionGt,def=0" json:"enable_lz4_compression_gt,omitempty"`
	ReferenceGenome                  *string                                     `protobuf:"bytes,32,opt,name=reference_genome,json=referenceGenome" json:"reference_genome,omitempty"`
	VcfHeaderFilename                *string                                     `protobuf:"bytes,33,opt,name=vcf_header_filename,json=vcfHeaderFilename" json:"vcf_header_filename,omitempty"`
}

// Default values for ImportConfiguration fields.
const (
	Default_ImportConfiguration_SizePerColumnPartition           = int64(16384)
	Default_ImportConfiguration_RowBasedPartitioning             = bool(false)
	Default_ImportConfiguration_ProduceCombinedVcf               = bool(false)
	Default_ImportConfiguration_ProduceTiledbArray               = bool(true)
	Default_ImportConfiguration_TreatDeletionsAsIntervals        = bool(true)
	Default_ImportConfiguration_NumParallelVcfFiles              = int32(1)
	Default_ImportConfiguration_DeleteAndCreateTiledbArray       = bool(false)
	Default_ImportConfiguration_DoPingPongBuffering              = bool(true)
	Default_ImportConfiguration_OffloadVcfOutputProcessing       = bool(true)
	Default_ImportConfiguration_DiscardVcfIndex                  = bool(true)
	Default_ImportConfiguration_SegmentSize                      = int64(10485760)
	Default_ImportConfiguration_CompressTiledbArray              = bool(true)
	Default_ImportConfiguration_NumCellsPerTile                  = int64(1000)
	Default_ImportConfiguration_FailIfUpdating                   = bool(false)
	Default_ImportConfiguration_TiledbCompressionType            = int32(1)
	Default_ImportConfiguration_TiledbCompressionLevel           = int32(-1)
	Default_ImportConfiguration_ConsolidateTiledbArrayAfterLoad  = bool(false)
	Default_ImportConfiguration_DisableSyncedWrites              = bool(true)
	Default_ImportConfiguration_LbCallsetRowIdx                  = int64(0)
	Default_ImportConfiguration_EnableSharedPosixfsOptimizations = bool(false)
	Default_ImportConfiguration_DisableDeltaEncodeForOffsets     = bool(false)
	Default_ImportConfiguration_DisableDeltaEncodeForCoords      = bool(false)
	Default_ImportConfiguration_EnableBitShuffleGt               = bool(false)
	Default_ImportConfiguration_EnableLz4CompressionGt           = bool(false)
)

func (x *ImportConfiguration) Reset() {
	*x = ImportConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_genomicsdb_import_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportConfiguration) ProtoMessage() {}

func (x *ImportConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_genomicsdb_import_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportConfiguration.ProtoReflect.Descriptor instead.
func (*ImportConfiguration) Descriptor() ([]byte, []int) {
	return file_genomicsdb_import_config_proto_rawDescGZIP(), []int{1}
}

func (x *ImportConfiguration) GetSizePerColumnPartition() int64 {
	if x != nil && x.SizePerColumnPartition != nil {
		return *x.SizePerColumnPartition
	}
	return Default_ImportConfiguration_SizePerColumnPartition
}

func (x *ImportConfiguration) GetRowBasedPartitioning() bool {
	if x != nil && x.RowBasedPartitioning != nil {
		return *x.RowBasedPartitioning
	}
	return Default_ImportConfiguration_RowBasedPartitioning
}

func (x *ImportConfiguration) GetProduceCombinedVcf() bool {
	if x != nil && x.ProduceCombinedVcf != nil {
		return *x.ProduceCombinedVcf
	}
	return Default_ImportConfiguration_ProduceCombinedVcf
}

func (x *ImportConfiguration) GetProduceTiledbArray() bool {
	if x != nil && x.ProduceTiledbArray != nil {
		return *x.ProduceTiledbArray
	}
	return Default_ImportConfiguration_ProduceTiledbArray
}

func (x *ImportConfiguration) GetColumnPartitions() []*Partition {
	if x != nil {
		return x.ColumnPartitions
	}
	return nil
}

func (m *ImportConfiguration) GetVidMappingOptions() isImportConfiguration_VidMappingOptions {
	if m != nil {
		return m.VidMappingOptions
	}
	return nil
}

func (x *ImportConfiguration) GetVidMappingFile() string {
	if x, ok := x.GetVidMappingOptions().(*ImportConfiguration_VidMappingFile); ok {
		return x.VidMappingFile
	}
	return ""
}

func (x *ImportConfiguration) GetVidMapping() *VidMappingPB {
	if x, ok := x.GetVidMappingOptions().(*ImportConfiguration_VidMapping); ok {
		return x.VidMapping
	}
	return nil
}

func (m *ImportConfiguration) GetCallsetMappingOptions() isImportConfiguration_CallsetMappingOptions {
	if m != nil {
		return m.CallsetMappingOptions
	}
	return nil
}

func (x *ImportConfiguration) GetCallsetMappingFile() string {
	if x, ok := x.GetCallsetMappingOptions().(*ImportConfiguration_CallsetMappingFile); ok {
		return x.CallsetMappingFile
	}
	return ""
}

func (x *ImportConfiguration) GetCallsetMapping() *CallsetMappingPB {
	if x, ok := x.GetCallsetMappingOptions().(*ImportConfiguration_CallsetMapping); ok {
		return x.CallsetMapping
	}
	return nil
}

func (x *ImportConfiguration) GetTreatDeletionsAsIntervals() bool {
	if x != nil && x.TreatDeletionsAsIntervals != nil {
		return *x.TreatDeletionsAsIntervals
	}
	return Default_ImportConfiguration_TreatDeletionsAsIntervals
}

func (x *ImportConfiguration) GetNumParallelVcfFiles() int32 {
	if x != nil && x.NumParallelVcfFiles != nil {
		return *x.NumParallelVcfFiles
	}
	return Default_ImportConfiguration_NumParallelVcfFiles
}

func (x *ImportConfiguration) GetDeleteAndCreateTiledbArray() bool {
	if x != nil && x.DeleteAndCreateTiledbArray != nil {
		return *x.DeleteAndCreateTiledbArray
	}
	return Default_ImportConfiguration_DeleteAndCreateTiledbArray
}

func (x *ImportConfiguration) GetDoPingPongBuffering() bool {
	if x != nil && x.DoPingPongBuffering != nil {
		return *x.DoPingPongBuffering
	}
	return Default_ImportConfiguration_DoPingPongBuffering
}

func (x *ImportConfiguration) GetOffloadVcfOutputProcessing() bool {
	if x != nil && x.OffloadVcfOutputProcessing != nil {
		return *x.OffloadVcfOutputProcessing
	}
	return Default_ImportConfiguration_OffloadVcfOutputProcessing
}

func (x *ImportConfiguration) GetDiscardVcfIndex() bool {
	if x != nil && x.DiscardVcfIndex != nil {
		return *x.DiscardVcfIndex
	}
	return Default_ImportConfiguration_DiscardVcfIndex
}

func (x *ImportConfiguration) GetSegmentSize() int64 {
	if x != nil && x.SegmentSize != nil {
		return *x.SegmentSize
	}
	return Default_ImportConfiguration_SegmentSize
}

func (x *ImportConfiguration) GetCompressTiledbArray() bool {
	if x != nil && x.CompressTiledbArray != nil {
		return *x.CompressTiledbArray
	}
	return Default_ImportConfiguration_CompressTiledbArray
}

func (x *ImportConfiguration) GetNumCellsPerTile() int64 {
	if x != nil && x.NumCellsPerTile != nil {
		return *x.NumCellsPerTile
	}
	return Default_ImportConfiguration_NumCellsPerTile
}

func (x *ImportConfiguration) GetFailIfUpdating() bool {
	if x != nil && x.FailIfUpdating != nil {
		return *x.FailIfUpdating
	}
	return Default_ImportConfiguration_FailIfUpdating
}

func (x *ImportConfiguration) GetTiledbCompressionType() int32 {
	if x != nil && x.TiledbCompressionType != nil {
		return *x.TiledbCompressionType
	}
	return Default_ImportConfiguration_TiledbCompressionType
}

func (x *ImportConfiguration) GetTiledbCompressionLevel() int32 {
	if x != nil && x.TiledbCompressionLevel != nil {
		return *x.TiledbCompressionLevel
	}
	return Default_ImportConfiguration_TiledbCompressionLevel
}

func (x *ImportConfiguration) GetConsolidateTiledbArrayAfterLoad() bool {
	if x != nil && x.ConsolidateTiledbArrayAfterLoad != nil {
		return *x.ConsolidateTiledbArrayAfterLoad
	}
	return Default_ImportConfiguration_ConsolidateTiledbArrayAfterLoad
}

func (x *ImportConfiguration) GetDisableSyncedWrites() bool {
	if x != nil && x.DisableSyncedWrites != nil {
		return *x.DisableSyncedWrites
	}
	return Default_ImportConfiguration_DisableSyncedWrites
}

func (x *ImportConfiguration) GetIgnoreCellsNotInPartition() bool {
	if x != nil && x.IgnoreCellsNotInPartition != nil {
		return *x.IgnoreCellsNotInPartition
	}
	return false
}

func (x *ImportConfiguration) GetLbCallsetRowIdx() int64 {
	if x != nil && x.LbCallsetRowIdx != nil {
		return *x.LbCallsetRowIdx
	}
	return Default_ImportConfiguration_LbCallsetRowIdx
}

func (x *ImportConfiguration) GetUbCallsetRowIdx() int64 {
	if x != nil && x.UbCallsetRowIdx != nil {
		return *x.UbCallsetRowIdx
	}
	return 0
}

func (x *ImportConfiguration) GetEnableSharedPosixfsOptimizations() bool {
	if x != nil && x.EnableSharedPosixfsOptimizations != nil {
		return *x.EnableSharedPosixfsOptimizations
	}
	return Default_ImportConfiguration_EnableSharedPosixfsOptimizations
}

func (x *ImportConfiguration) GetDisableDeltaEncodeForOffsets() bool {
	if x != nil && x.DisableDeltaEncodeForOffsets != nil {
		return *x.DisableDeltaEncodeForOffsets
	}
	return Default_ImportConfiguration_DisableDeltaEncodeForOffsets
}

func (x *ImportConfiguration) GetDisableDeltaEncodeForCoords() bool {
	if x != nil && x.DisableDeltaEncodeForCoords != nil {
		return *x.DisableDeltaEncodeForCoords
	}
	return Default_ImportConfiguration_DisableDeltaEncodeForCoords
}

func (x *ImportConfiguration) GetEnableBitShuffleGt() bool {
	if x != nil && x.EnableBitShuffleGt != nil {
		return *x.EnableBitShuffleGt
	}
	return Default_ImportConfiguration_EnableBitShuffleGt
}

func (x *ImportConfiguration) GetEnableLz4CompressionGt() bool {
	if x != nil && x.EnableLz4CompressionGt != nil {
		return *x.EnableLz4CompressionGt
	}
	return Default_ImportConfiguration_EnableLz4CompressionGt
}

func (x *ImportConfiguration) GetReferenceGenome() string {
	if x != nil && x.ReferenceGenome != nil {
		return *x.ReferenceGenome
	}
	return ""
}

func (x *ImportConfiguration) GetVcfHeaderFilename() string {
	if x != nil && x.VcfHeaderFilename != nil {
		return *x.VcfHeaderFilename
	}
	return ""
}

type isImportConfiguration_VidMappingOptions interface {
	isImportConfiguration_VidMappingOptions()
}

type ImportConfiguration_VidMappingFile struct {
	VidMappingFile string `protobuf:"bytes,5,opt,name=vid_mapping_file,json=vidMappingFile,oneof"`
}

type ImportConfiguration_VidMapping struct {
	VidMapping *VidMappingPB `protobuf:"bytes,25,opt,name=vid_mapping,json=vidMapping,oneof"`
}

func (*ImportConfiguration_VidMappingFile) isImportConfiguration_VidMappingOptions() {}

func (*ImportConfiguration_VidMapping) isImportConfiguration_VidMappingOptions() {}

type isImportConfiguration_CallsetMappingOptions interface {
	isImportConfiguration_CallsetMappingOptions()
}

type ImportConfiguration_CallsetMappingFile struct {
	CallsetMappingFile string `protobuf:"bytes,6,opt,name=callset_mapping_file,json=callsetMappingFile,oneof"`
}

type ImportConfiguration_CallsetMapping struct {
	CallsetMapping *CallsetMappingPB `protobuf:"bytes,26,opt,name=callset_mapping,json=callsetMapping,oneof"`
}

func (*ImportConfiguration_CallsetMappingFile) isImportConfiguration_CallsetMappingOptions() {}

func (*ImportConfiguration_CallsetMapping) isImportConfiguration_CallsetMappingOptions() {}

var File_genomicsdb_import_config_proto protoreflect.FileDescriptor

var file_genomicsdb_import_config_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x64, 0x62, 0x5f, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0d, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x64, 0x62, 0x5f, 0x70, 0x62, 0x1a,
	0x1c, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x64, 0x62, 0x5f, 0x63, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x64, 0x62, 0x5f, 0x76, 0x69, 0x64, 0x5f, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x67, 0x65, 0x6e,
	0x6f, 0x6d, 0x69, 0x63, 0x73, 0x64, 0x62, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x65, 0x74, 0x73,
	0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdc,
	0x02, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x05,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x47, 0x65,
	0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x44, 0x42, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x05,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x59, 0x0a, 0x29, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x24, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x76, 0x63, 0x66, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x76, 0x63,
	0x66, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2e, 0x0a, 0x13, 0x76, 0x63, 0x66, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x76, 0x63,
	0x66, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x47,
	0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x44, 0x42, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52,
	0x03, 0x65, 0x6e, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x61, 0x72, 0x72, 0x61, 0x79, 0x22, 0x89, 0x10,
	0x0a, 0x13, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x19, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x02, 0x28, 0x03, 0x3a, 0x05, 0x31, 0x36, 0x33, 0x38, 0x34, 0x52,
	0x16, 0x73, 0x69, 0x7a, 0x65, 0x50, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x16, 0x72, 0x6f, 0x77, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x14,
	0x72, 0x6f, 0x77, 0x42, 0x61, 0x73, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x5f,
	0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x76, 0x63, 0x66, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x56, 0x63, 0x66, 0x12, 0x36, 0x0a,
	0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6c, 0x65, 0x64, 0x62, 0x5f,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75,
	0x65, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x54, 0x69, 0x6c, 0x65, 0x64, 0x62,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x45, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x64, 0x62, 0x5f, 0x70, 0x62,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x10,
	0x76, 0x69, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x76, 0x69, 0x64, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x76, 0x69, 0x64, 0x5f,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x56, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x42, 0x48, 0x00, 0x52, 0x0a,
	0x76, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x61,
	0x6c, 0x6c, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x12, 0x63, 0x61, 0x6c, 0x6c,
	0x73, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x3c,
	0x0a, 0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x65,
	0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x42, 0x48, 0x01, 0x52, 0x0e, 0x63, 0x61,
	0x6c, 0x6c, 0x73, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x45, 0x0a, 0x1c,
	0x74, 0x72, 0x65, 0x61, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x61, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x19, 0x74, 0x72, 0x65, 0x61, 0x74, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6c,
	0x6c, 0x65, 0x6c, 0x5f, 0x76, 0x63, 0x66, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x3a, 0x01, 0x31, 0x52, 0x13, 0x6e, 0x75, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6c,
	0x6c, 0x65, 0x6c, 0x56, 0x63, 0x66, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x1e, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6c, 0x65, 0x64, 0x62, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x1a, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x6e, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6c, 0x65, 0x64,
	0x62, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x39, 0x0a, 0x16, 0x64, 0x6f, 0x5f, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x6f, 0x6e, 0x67, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x13, 0x64, 0x6f,
	0x50, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6e, 0x67, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x47, 0x0a, 0x1d, 0x6f, 0x66, 0x66, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x76, 0x63, 0x66,
	0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x1a,
	0x6f, 0x66, 0x66, 0x6c, 0x6f, 0x61, 0x64, 0x56, 0x63, 0x66, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x11, 0x64, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x76, 0x63, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0f, 0x64, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x56, 0x63, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2b, 0x0a, 0x0c,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x03, 0x3a, 0x08, 0x31, 0x30, 0x34, 0x38, 0x35, 0x37, 0x36, 0x30, 0x52, 0x0b, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x38, 0x0a, 0x15, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6c, 0x65, 0x64, 0x62, 0x5f, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x13,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6c, 0x65, 0x64, 0x62, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x12, 0x31, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x3a,
	0x04, 0x31, 0x30, 0x30, 0x30, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x50,
	0x65, 0x72, 0x54, 0x69, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x10, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x69,
	0x66, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x49, 0x66, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x39, 0x0a, 0x17, 0x74, 0x69, 0x6c, 0x65, 0x64,
	0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x31, 0x52, 0x15, 0x74, 0x69, 0x6c,
	0x65, 0x64, 0x62, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x3c, 0x0a, 0x18, 0x74, 0x69, 0x6c, 0x65, 0x64, 0x62, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x16, 0x74, 0x69, 0x6c, 0x65, 0x64, 0x62,
	0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x53, 0x0a, 0x23, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6c, 0x65, 0x64, 0x62, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x1f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6c, 0x65, 0x64, 0x62, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x38, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x13, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x73, 0x12,
	0x40, 0x0a, 0x1d, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x5f,
	0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x43, 0x65,
	0x6c, 0x6c, 0x73, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x62, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x65, 0x74, 0x5f,
	0x72, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x01, 0x30,
	0x52, 0x0f, 0x6c, 0x62, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x77, 0x49, 0x64,
	0x78, 0x12, 0x2b, 0x0a, 0x12, 0x75, 0x62, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x65, 0x74, 0x5f,
	0x72, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x75,
	0x62, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x65, 0x74, 0x52, 0x6f, 0x77, 0x49, 0x64, 0x78, 0x12, 0x54,
	0x0a, 0x23, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x78, 0x66, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x50, 0x6f, 0x73, 0x69, 0x78, 0x66, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4d, 0x0a, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x1c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x1f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x1b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x38, 0x0a, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x73,
	0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x5f, 0x67, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x69,
	0x74, 0x53, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x47, 0x74, 0x12, 0x40, 0x0a, 0x19, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x7a, 0x34, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x7a, 0x34, 0x43,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x74, 0x12, 0x29, 0x0a, 0x10,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x65,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x76, 0x63, 0x66, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x76, 0x63, 0x66, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x76, 0x69, 0x64, 0x5f, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x19,
	0x0a, 0x17, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x40, 0x0a, 0x14, 0x6f, 0x72, 0x67,
	0x2e, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x64, 0x62, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x42, 0x1d, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x44, 0x42, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5a, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
}

var (
	file_genomicsdb_import_config_proto_rawDescOnce sync.Once
	file_genomicsdb_import_config_proto_rawDescData = file_genomicsdb_import_config_proto_rawDesc
)

func file_genomicsdb_import_config_proto_rawDescGZIP() []byte {
	file_genomicsdb_import_config_proto_rawDescOnce.Do(func() {
		file_genomicsdb_import_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_genomicsdb_import_config_proto_rawDescData)
	})
	return file_genomicsdb_import_config_proto_rawDescData
}

var file_genomicsdb_import_config_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_genomicsdb_import_config_proto_goTypes = []interface{}{
	(*Partition)(nil),           // 0: genomicsdb_pb.Partition
	(*ImportConfiguration)(nil), // 1: genomicsdb_pb.ImportConfiguration
	(*GenomicsDBColumn)(nil),    // 2: GenomicsDBColumn
	(*VidMappingPB)(nil),        // 3: VidMappingPB
	(*CallsetMappingPB)(nil),    // 4: CallsetMappingPB
}
var file_genomicsdb_import_config_proto_depIdxs = []int32{
	2, // 0: genomicsdb_pb.Partition.begin:type_name -> GenomicsDBColumn
	2, // 1: genomicsdb_pb.Partition.end:type_name -> GenomicsDBColumn
	0, // 2: genomicsdb_pb.ImportConfiguration.column_partitions:type_name -> genomicsdb_pb.Partition
	3, // 3: genomicsdb_pb.ImportConfiguration.vid_mapping:type_name -> VidMappingPB
	4, // 4: genomicsdb_pb.ImportConfiguration.callset_mapping:type_name -> CallsetMappingPB
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_genomicsdb_import_config_proto_init() }
func file_genomicsdb_import_config_proto_init() {
	if File_genomicsdb_import_config_proto != nil {
		return
	}
	file_genomicsdb_coordinates_proto_init()
	file_genomicsdb_vid_mapping_proto_init()
	file_genomicsdb_callsets_mapping_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_genomicsdb_import_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Partition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_genomicsdb_import_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_genomicsdb_import_config_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Partition_ArrayName)(nil),
		(*Partition_GenerateArrayNameFromPartitionBounds)(nil),
	}
	file_genomicsdb_import_config_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ImportConfiguration_VidMappingFile)(nil),
		(*ImportConfiguration_VidMapping)(nil),
		(*ImportConfiguration_CallsetMappingFile)(nil),
		(*ImportConfiguration_CallsetMapping)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_genomicsdb_import_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_genomicsdb_import_config_proto_goTypes,
		DependencyIndexes: file_genomicsdb_import_config_proto_depIdxs,
		MessageInfos:      file_genomicsdb_import_config_proto_msgTypes,
	}.Build()
	File_genomicsdb_import_config_proto = out.File
	file_genomicsdb_import_config_proto_rawDesc = nil
	file_genomicsdb_import_config_proto_goTypes = nil
	file_genomicsdb_import_config_proto_depIdxs = nil
}
