//*
// The MIT License (MIT)
// Copyright (c) 2016-2017 Intel Corporation
// Copyright (c) 2020-2023 Omics Data Automation, Inc.
// Copyright (c) 2023 dātma, inc™
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

//*
// To build, use protocol buffer version >3.2.0 and the following command from base directory:
// $ protoc -Isrc/resources/ --java_out=src/main/java/ src/resources/genomicsdb_export_config.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.7
// source: genomicsdb_export_config.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GenomicsDBColumnOrIntervalList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumnOrIntervalList []*GenomicsDBColumnOrInterval `protobuf:"bytes,1,rep,name=column_or_interval_list,json=columnOrIntervalList" json:"column_or_interval_list,omitempty"`
}

func (x *GenomicsDBColumnOrIntervalList) Reset() {
	*x = GenomicsDBColumnOrIntervalList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_genomicsdb_export_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenomicsDBColumnOrIntervalList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenomicsDBColumnOrIntervalList) ProtoMessage() {}

func (x *GenomicsDBColumnOrIntervalList) ProtoReflect() protoreflect.Message {
	mi := &file_genomicsdb_export_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenomicsDBColumnOrIntervalList.ProtoReflect.Descriptor instead.
func (*GenomicsDBColumnOrIntervalList) Descriptor() ([]byte, []int) {
	return file_genomicsdb_export_config_proto_rawDescGZIP(), []int{0}
}

func (x *GenomicsDBColumnOrIntervalList) GetColumnOrIntervalList() []*GenomicsDBColumnOrInterval {
	if x != nil {
		return x.ColumnOrIntervalList
	}
	return nil
}

type RowRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Low  *int64 `protobuf:"varint,1,req,name=low" json:"low,omitempty"`
	High *int64 `protobuf:"varint,2,req,name=high" json:"high,omitempty"`
}

func (x *RowRange) Reset() {
	*x = RowRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_genomicsdb_export_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RowRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowRange) ProtoMessage() {}

func (x *RowRange) ProtoReflect() protoreflect.Message {
	mi := &file_genomicsdb_export_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowRange.ProtoReflect.Descriptor instead.
func (*RowRange) Descriptor() ([]byte, []int) {
	return file_genomicsdb_export_config_proto_rawDescGZIP(), []int{1}
}

func (x *RowRange) GetLow() int64 {
	if x != nil && x.Low != nil {
		return *x.Low
	}
	return 0
}

func (x *RowRange) GetHigh() int64 {
	if x != nil && x.High != nil {
		return *x.High
	}
	return 0
}

type RowRangeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RangeList []*RowRange `protobuf:"bytes,1,rep,name=range_list,json=rangeList" json:"range_list,omitempty"`
}

func (x *RowRangeList) Reset() {
	*x = RowRangeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_genomicsdb_export_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RowRangeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowRangeList) ProtoMessage() {}

func (x *RowRangeList) ProtoReflect() protoreflect.Message {
	mi := &file_genomicsdb_export_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowRangeList.ProtoReflect.Descriptor instead.
func (*RowRangeList) Descriptor() ([]byte, []int) {
	return file_genomicsdb_export_config_proto_rawDescGZIP(), []int{2}
}

func (x *RowRangeList) GetRangeList() []*RowRange {
	if x != nil {
		return x.RangeList
	}
	return nil
}

type SparkConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryBlockSize       *int64 `protobuf:"varint,1,opt,name=query_block_size,json=queryBlockSize" json:"query_block_size,omitempty"`
	QueryBlockSizeMargin *int64 `protobuf:"varint,2,opt,name=query_block_size_margin,json=queryBlockSizeMargin" json:"query_block_size_margin,omitempty"`
}

func (x *SparkConfig) Reset() {
	*x = SparkConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_genomicsdb_export_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SparkConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SparkConfig) ProtoMessage() {}

func (x *SparkConfig) ProtoReflect() protoreflect.Message {
	mi := &file_genomicsdb_export_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SparkConfig.ProtoReflect.Descriptor instead.
func (*SparkConfig) Descriptor() ([]byte, []int) {
	return file_genomicsdb_export_config_proto_rawDescGZIP(), []int{3}
}

func (x *SparkConfig) GetQueryBlockSize() int64 {
	if x != nil && x.QueryBlockSize != nil {
		return *x.QueryBlockSize
	}
	return 0
}

func (x *SparkConfig) GetQueryBlockSizeMargin() int64 {
	if x != nil && x.QueryBlockSizeMargin != nil {
		return *x.QueryBlockSizeMargin
	}
	return 0
}

type AnnotationSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename        *string  `protobuf:"bytes,1,req,name=filename" json:"filename,omitempty"`
	DataSource      *string  `protobuf:"bytes,2,req,name=data_source,json=dataSource" json:"data_source,omitempty"`
	Attributes      []string `protobuf:"bytes,3,rep,name=attributes" json:"attributes,omitempty"`
	IsVcf           *bool    `protobuf:"varint,4,opt,name=is_vcf,json=isVcf,def=1" json:"is_vcf,omitempty"`
	FileChromosomes []string `protobuf:"bytes,5,rep,name=file_chromosomes,json=fileChromosomes" json:"file_chromosomes,omitempty"`
}

// Default values for AnnotationSource fields.
const (
	Default_AnnotationSource_IsVcf = bool(true)
)

func (x *AnnotationSource) Reset() {
	*x = AnnotationSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_genomicsdb_export_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotationSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotationSource) ProtoMessage() {}

func (x *AnnotationSource) ProtoReflect() protoreflect.Message {
	mi := &file_genomicsdb_export_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotationSource.ProtoReflect.Descriptor instead.
func (*AnnotationSource) Descriptor() ([]byte, []int) {
	return file_genomicsdb_export_config_proto_rawDescGZIP(), []int{4}
}

func (x *AnnotationSource) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *AnnotationSource) GetDataSource() string {
	if x != nil && x.DataSource != nil {
		return *x.DataSource
	}
	return ""
}

func (x *AnnotationSource) GetAttributes() []string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *AnnotationSource) GetIsVcf() bool {
	if x != nil && x.IsVcf != nil {
		return *x.IsVcf
	}
	return Default_AnnotationSource_IsVcf
}

func (x *AnnotationSource) GetFileChromosomes() []string {
	if x != nil {
		return x.FileChromosomes
	}
	return nil
}

type ExportConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workspace *string `protobuf:"bytes,1,req,name=workspace" json:"workspace,omitempty"`
	// Types that are assignable to Array:
	//
	//	*ExportConfiguration_ArrayName
	//	*ExportConfiguration_GenerateArrayNameFromPartitionBounds
	Array           isExportConfiguration_Array `protobuf_oneof:"array"`
	ReferenceGenome *string                     `protobuf:"bytes,4,opt,name=reference_genome,json=referenceGenome" json:"reference_genome,omitempty"`
	// Only one of the following two fields must be defined - the seconds one is  a simpler
	// version that I would recommend using
	// Ideally, query_column_ranges should be deprecated
	QueryColumnRanges    []*GenomicsDBColumnOrIntervalList `protobuf:"bytes,5,rep,name=query_column_ranges,json=queryColumnRanges" json:"query_column_ranges,omitempty"`
	QueryContigIntervals []*ContigInterval                 `protobuf:"bytes,6,rep,name=query_contig_intervals,json=queryContigIntervals" json:"query_contig_intervals,omitempty"`
	// Similar to above - query_row_ranges should be deprecated
	QueryRowRanges    []*RowRangeList `protobuf:"bytes,7,rep,name=query_row_ranges,json=queryRowRanges" json:"query_row_ranges,omitempty"`
	QuerySampleNames  []string        `protobuf:"bytes,8,rep,name=query_sample_names,json=querySampleNames" json:"query_sample_names,omitempty"`
	Attributes        []string        `protobuf:"bytes,9,rep,name=attributes" json:"attributes,omitempty"`
	QueryFilter       *string         `protobuf:"bytes,10,opt,name=query_filter,json=queryFilter" json:"query_filter,omitempty"`
	VcfHeaderFilename *string         `protobuf:"bytes,11,opt,name=vcf_header_filename,json=vcfHeaderFilename" json:"vcf_header_filename,omitempty"`
	VcfOutputFilename *string         `protobuf:"bytes,12,opt,name=vcf_output_filename,json=vcfOutputFilename" json:"vcf_output_filename,omitempty"`
	VcfOutputFormat   *string         `protobuf:"bytes,13,opt,name=vcf_output_format,json=vcfOutputFormat" json:"vcf_output_format,omitempty"`
	// Types that are assignable to VidMappingInfo:
	//
	//	*ExportConfiguration_VidMappingFile
	//	*ExportConfiguration_VidMapping
	VidMappingInfo isExportConfiguration_VidMappingInfo `protobuf_oneof:"vid_mapping_info"`
	// Types that are assignable to CallsetMappingInfo:
	//
	//	*ExportConfiguration_CallsetMappingFile
	//	*ExportConfiguration_CallsetMapping
	CallsetMappingInfo                            isExportConfiguration_CallsetMappingInfo `protobuf_oneof:"callset_mapping_info"`
	MaxDiploidAltAllelesThatCanBeGenotyped        *uint32                                  `protobuf:"varint,18,opt,name=max_diploid_alt_alleles_that_can_be_genotyped,json=maxDiploidAltAllelesThatCanBeGenotyped" json:"max_diploid_alt_alleles_that_can_be_genotyped,omitempty"`
	MaxGenotypeCount                              *uint32                                  `protobuf:"varint,19,opt,name=max_genotype_count,json=maxGenotypeCount" json:"max_genotype_count,omitempty"`
	IndexOutput_VCF                               *bool                                    `protobuf:"varint,20,opt,name=index_output_VCF,json=indexOutputVCF" json:"index_output_VCF,omitempty"`
	Produce_GTField                               *bool                                    `protobuf:"varint,21,opt,name=produce_GT_field,json=produceGTField" json:"produce_GT_field,omitempty"`
	Produce_FILTERField                           *bool                                    `protobuf:"varint,22,opt,name=produce_FILTER_field,json=produceFILTERField" json:"produce_FILTER_field,omitempty"`
	SitesOnlyQuery                                *bool                                    `protobuf:"varint,23,opt,name=sites_only_query,json=sitesOnlyQuery" json:"sites_only_query,omitempty"`
	Produce_GTWithMin_PLValueForSpanningDeletions *bool                                    `protobuf:"varint,24,opt,name=produce_GT_with_min_PL_value_for_spanning_deletions,json=produceGTWithMinPLValueForSpanningDeletions" json:"produce_GT_with_min_PL_value_for_spanning_deletions,omitempty"`
	ScanFull                                      *bool                                    `protobuf:"varint,25,opt,name=scan_full,json=scanFull" json:"scan_full,omitempty"`
	SegmentSize                                   *uint32                                  `protobuf:"varint,26,opt,name=segment_size,json=segmentSize,def=10485760" json:"segment_size,omitempty"`
	CombinedVcfRecordsBufferSizeLimit             *uint32                                  `protobuf:"varint,27,opt,name=combined_vcf_records_buffer_size_limit,json=combinedVcfRecordsBufferSizeLimit" json:"combined_vcf_records_buffer_size_limit,omitempty"`
	EnableSharedPosixfsOptimizations              *bool                                    `protobuf:"varint,28,opt,name=enable_shared_posixfs_optimizations,json=enableSharedPosixfsOptimizations,def=0" json:"enable_shared_posixfs_optimizations,omitempty"`
	BypassIntersectingIntervalsPhase              *bool                                    `protobuf:"varint,29,opt,name=bypass_intersecting_intervals_phase,json=bypassIntersectingIntervalsPhase,def=0" json:"bypass_intersecting_intervals_phase,omitempty"`
	SparkConfig                                   *SparkConfig                             `protobuf:"bytes,30,opt,name=spark_config,json=sparkConfig" json:"spark_config,omitempty"`
	AnnotationSource                              []*AnnotationSource                      `protobuf:"bytes,31,rep,name=annotation_source,json=annotationSource" json:"annotation_source,omitempty"`
	AnnotationBufferSize                          *uint32                                  `protobuf:"varint,32,opt,name=annotation_buffer_size,json=annotationBufferSize,def=10240" json:"annotation_buffer_size,omitempty"`
}

// Default values for ExportConfiguration fields.
const (
	Default_ExportConfiguration_SegmentSize                      = uint32(10485760)
	Default_ExportConfiguration_EnableSharedPosixfsOptimizations = bool(false)
	Default_ExportConfiguration_BypassIntersectingIntervalsPhase = bool(false)
	Default_ExportConfiguration_AnnotationBufferSize             = uint32(10240)
)

func (x *ExportConfiguration) Reset() {
	*x = ExportConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_genomicsdb_export_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportConfiguration) ProtoMessage() {}

func (x *ExportConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_genomicsdb_export_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportConfiguration.ProtoReflect.Descriptor instead.
func (*ExportConfiguration) Descriptor() ([]byte, []int) {
	return file_genomicsdb_export_config_proto_rawDescGZIP(), []int{5}
}

func (x *ExportConfiguration) GetWorkspace() string {
	if x != nil && x.Workspace != nil {
		return *x.Workspace
	}
	return ""
}

func (m *ExportConfiguration) GetArray() isExportConfiguration_Array {
	if m != nil {
		return m.Array
	}
	return nil
}

func (x *ExportConfiguration) GetArrayName() string {
	if x, ok := x.GetArray().(*ExportConfiguration_ArrayName); ok {
		return x.ArrayName
	}
	return ""
}

func (x *ExportConfiguration) GetGenerateArrayNameFromPartitionBounds() bool {
	if x, ok := x.GetArray().(*ExportConfiguration_GenerateArrayNameFromPartitionBounds); ok {
		return x.GenerateArrayNameFromPartitionBounds
	}
	return false
}

func (x *ExportConfiguration) GetReferenceGenome() string {
	if x != nil && x.ReferenceGenome != nil {
		return *x.ReferenceGenome
	}
	return ""
}

func (x *ExportConfiguration) GetQueryColumnRanges() []*GenomicsDBColumnOrIntervalList {
	if x != nil {
		return x.QueryColumnRanges
	}
	return nil
}

func (x *ExportConfiguration) GetQueryContigIntervals() []*ContigInterval {
	if x != nil {
		return x.QueryContigIntervals
	}
	return nil
}

func (x *ExportConfiguration) GetQueryRowRanges() []*RowRangeList {
	if x != nil {
		return x.QueryRowRanges
	}
	return nil
}

func (x *ExportConfiguration) GetQuerySampleNames() []string {
	if x != nil {
		return x.QuerySampleNames
	}
	return nil
}

func (x *ExportConfiguration) GetAttributes() []string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *ExportConfiguration) GetQueryFilter() string {
	if x != nil && x.QueryFilter != nil {
		return *x.QueryFilter
	}
	return ""
}

func (x *ExportConfiguration) GetVcfHeaderFilename() string {
	if x != nil && x.VcfHeaderFilename != nil {
		return *x.VcfHeaderFilename
	}
	return ""
}

func (x *ExportConfiguration) GetVcfOutputFilename() string {
	if x != nil && x.VcfOutputFilename != nil {
		return *x.VcfOutputFilename
	}
	return ""
}

func (x *ExportConfiguration) GetVcfOutputFormat() string {
	if x != nil && x.VcfOutputFormat != nil {
		return *x.VcfOutputFormat
	}
	return ""
}

func (m *ExportConfiguration) GetVidMappingInfo() isExportConfiguration_VidMappingInfo {
	if m != nil {
		return m.VidMappingInfo
	}
	return nil
}

func (x *ExportConfiguration) GetVidMappingFile() string {
	if x, ok := x.GetVidMappingInfo().(*ExportConfiguration_VidMappingFile); ok {
		return x.VidMappingFile
	}
	return ""
}

func (x *ExportConfiguration) GetVidMapping() *VidMappingPB {
	if x, ok := x.GetVidMappingInfo().(*ExportConfiguration_VidMapping); ok {
		return x.VidMapping
	}
	return nil
}

func (m *ExportConfiguration) GetCallsetMappingInfo() isExportConfiguration_CallsetMappingInfo {
	if m != nil {
		return m.CallsetMappingInfo
	}
	return nil
}

func (x *ExportConfiguration) GetCallsetMappingFile() string {
	if x, ok := x.GetCallsetMappingInfo().(*ExportConfiguration_CallsetMappingFile); ok {
		return x.CallsetMappingFile
	}
	return ""
}

func (x *ExportConfiguration) GetCallsetMapping() *CallsetMappingPB {
	if x, ok := x.GetCallsetMappingInfo().(*ExportConfiguration_CallsetMapping); ok {
		return x.CallsetMapping
	}
	return nil
}

func (x *ExportConfiguration) GetMaxDiploidAltAllelesThatCanBeGenotyped() uint32 {
	if x != nil && x.MaxDiploidAltAllelesThatCanBeGenotyped != nil {
		return *x.MaxDiploidAltAllelesThatCanBeGenotyped
	}
	return 0
}

func (x *ExportConfiguration) GetMaxGenotypeCount() uint32 {
	if x != nil && x.MaxGenotypeCount != nil {
		return *x.MaxGenotypeCount
	}
	return 0
}

func (x *ExportConfiguration) GetIndexOutput_VCF() bool {
	if x != nil && x.IndexOutput_VCF != nil {
		return *x.IndexOutput_VCF
	}
	return false
}

func (x *ExportConfiguration) GetProduce_GTField() bool {
	if x != nil && x.Produce_GTField != nil {
		return *x.Produce_GTField
	}
	return false
}

func (x *ExportConfiguration) GetProduce_FILTERField() bool {
	if x != nil && x.Produce_FILTERField != nil {
		return *x.Produce_FILTERField
	}
	return false
}

func (x *ExportConfiguration) GetSitesOnlyQuery() bool {
	if x != nil && x.SitesOnlyQuery != nil {
		return *x.SitesOnlyQuery
	}
	return false
}

func (x *ExportConfiguration) GetProduce_GTWithMin_PLValueForSpanningDeletions() bool {
	if x != nil && x.Produce_GTWithMin_PLValueForSpanningDeletions != nil {
		return *x.Produce_GTWithMin_PLValueForSpanningDeletions
	}
	return false
}

func (x *ExportConfiguration) GetScanFull() bool {
	if x != nil && x.ScanFull != nil {
		return *x.ScanFull
	}
	return false
}

func (x *ExportConfiguration) GetSegmentSize() uint32 {
	if x != nil && x.SegmentSize != nil {
		return *x.SegmentSize
	}
	return Default_ExportConfiguration_SegmentSize
}

func (x *ExportConfiguration) GetCombinedVcfRecordsBufferSizeLimit() uint32 {
	if x != nil && x.CombinedVcfRecordsBufferSizeLimit != nil {
		return *x.CombinedVcfRecordsBufferSizeLimit
	}
	return 0
}

func (x *ExportConfiguration) GetEnableSharedPosixfsOptimizations() bool {
	if x != nil && x.EnableSharedPosixfsOptimizations != nil {
		return *x.EnableSharedPosixfsOptimizations
	}
	return Default_ExportConfiguration_EnableSharedPosixfsOptimizations
}

func (x *ExportConfiguration) GetBypassIntersectingIntervalsPhase() bool {
	if x != nil && x.BypassIntersectingIntervalsPhase != nil {
		return *x.BypassIntersectingIntervalsPhase
	}
	return Default_ExportConfiguration_BypassIntersectingIntervalsPhase
}

func (x *ExportConfiguration) GetSparkConfig() *SparkConfig {
	if x != nil {
		return x.SparkConfig
	}
	return nil
}

func (x *ExportConfiguration) GetAnnotationSource() []*AnnotationSource {
	if x != nil {
		return x.AnnotationSource
	}
	return nil
}

func (x *ExportConfiguration) GetAnnotationBufferSize() uint32 {
	if x != nil && x.AnnotationBufferSize != nil {
		return *x.AnnotationBufferSize
	}
	return Default_ExportConfiguration_AnnotationBufferSize
}

type isExportConfiguration_Array interface {
	isExportConfiguration_Array()
}

type ExportConfiguration_ArrayName struct {
	ArrayName string `protobuf:"bytes,2,opt,name=array_name,json=arrayName,oneof"`
}

type ExportConfiguration_GenerateArrayNameFromPartitionBounds struct {
	GenerateArrayNameFromPartitionBounds bool `protobuf:"varint,3,opt,name=generate_array_name_from_partition_bounds,json=generateArrayNameFromPartitionBounds,oneof"`
}

func (*ExportConfiguration_ArrayName) isExportConfiguration_Array() {}

func (*ExportConfiguration_GenerateArrayNameFromPartitionBounds) isExportConfiguration_Array() {}

type isExportConfiguration_VidMappingInfo interface {
	isExportConfiguration_VidMappingInfo()
}

type ExportConfiguration_VidMappingFile struct {
	VidMappingFile string `protobuf:"bytes,14,opt,name=vid_mapping_file,json=vidMappingFile,oneof"`
}

type ExportConfiguration_VidMapping struct {
	VidMapping *VidMappingPB `protobuf:"bytes,15,opt,name=vid_mapping,json=vidMapping,oneof"`
}

func (*ExportConfiguration_VidMappingFile) isExportConfiguration_VidMappingInfo() {}

func (*ExportConfiguration_VidMapping) isExportConfiguration_VidMappingInfo() {}

type isExportConfiguration_CallsetMappingInfo interface {
	isExportConfiguration_CallsetMappingInfo()
}

type ExportConfiguration_CallsetMappingFile struct {
	CallsetMappingFile string `protobuf:"bytes,16,opt,name=callset_mapping_file,json=callsetMappingFile,oneof"`
}

type ExportConfiguration_CallsetMapping struct {
	CallsetMapping *CallsetMappingPB `protobuf:"bytes,17,opt,name=callset_mapping,json=callsetMapping,oneof"`
}

func (*ExportConfiguration_CallsetMappingFile) isExportConfiguration_CallsetMappingInfo() {}

func (*ExportConfiguration_CallsetMapping) isExportConfiguration_CallsetMappingInfo() {}

var File_genomicsdb_export_config_proto protoreflect.FileDescriptor

var file_genomicsdb_export_config_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x64, 0x62, 0x5f, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0d, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x64, 0x62, 0x5f, 0x70, 0x62, 0x1a,
	0x1c, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x64, 0x62, 0x5f, 0x63, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x64, 0x62, 0x5f, 0x76, 0x69, 0x64, 0x5f, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x67, 0x65, 0x6e,
	0x6f, 0x6d, 0x69, 0x63, 0x73, 0x64, 0x62, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x65, 0x74, 0x73,
	0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x74,
	0x0a, 0x1e, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x44, 0x42, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x4f, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x52, 0x0a, 0x17, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6f, 0x72, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x44, 0x42, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x14,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4f, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x30, 0x0a, 0x08, 0x52, 0x6f, 0x77, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x03, 0x6c,
	0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x22, 0x46, 0x0a, 0x0c, 0x52, 0x6f, 0x77, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x65, 0x6e,
	0x6f, 0x6d, 0x69, 0x63, 0x73, 0x64, 0x62, 0x5f, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x77, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x6e,
	0x0a, 0x0b, 0x53, 0x70, 0x61, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x28, 0x0a,
	0x10, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x71, 0x75, 0x65, 0x72, 0x79, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x22, 0xb7,
	0x01, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x1b, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x76, 0x63, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x05, 0x69, 0x73, 0x56, 0x63, 0x66, 0x12, 0x29, 0x0a,
	0x10, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x6f, 0x73, 0x6f, 0x6d, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x72,
	0x6f, 0x6d, 0x6f, 0x73, 0x6f, 0x6d, 0x65, 0x73, 0x22, 0x83, 0x0f, 0x0a, 0x13, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1f,
	0x0a, 0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x61, 0x72, 0x72, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x59, 0x0a, 0x29, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x24, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x47,
	0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x12, 0x5d, 0x0a, 0x13, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x64, 0x62, 0x5f,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x44, 0x42, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x4f, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x11, 0x71, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x16, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x67, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x14, 0x71, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74,
	0x69, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x12, 0x45, 0x0a, 0x10, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73,
	0x64, 0x62, 0x5f, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x77, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x0e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x6f, 0x77, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x76, 0x63, 0x66, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x76, 0x63, 0x66, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x76, 0x63, 0x66, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x76, 0x63, 0x66, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x63, 0x66, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x76, 0x63, 0x66, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x2a, 0x0a, 0x10, 0x76, 0x69, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x76, 0x69, 0x64,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x76,
	0x69, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x56, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x42, 0x48,
	0x01, 0x52, 0x0a, 0x76, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a,
	0x14, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x12, 0x63,
	0x61, 0x6c, 0x6c, 0x73, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x3c, 0x0a, 0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x61, 0x6c,
	0x6c, 0x73, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x42, 0x48, 0x02, 0x52,
	0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12,
	0x5d, 0x0a, 0x2d, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x69, 0x70, 0x6c, 0x6f, 0x69, 0x64, 0x5f, 0x61,
	0x6c, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x65, 0x73, 0x5f, 0x74, 0x68, 0x61, 0x74, 0x5f,
	0x63, 0x61, 0x6e, 0x5f, 0x62, 0x65, 0x5f, 0x67, 0x65, 0x6e, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x64,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x26, 0x6d, 0x61, 0x78, 0x44, 0x69, 0x70, 0x6c, 0x6f,
	0x69, 0x64, 0x41, 0x6c, 0x74, 0x41, 0x6c, 0x6c, 0x65, 0x6c, 0x65, 0x73, 0x54, 0x68, 0x61, 0x74,
	0x43, 0x61, 0x6e, 0x42, 0x65, 0x47, 0x65, 0x6e, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x67, 0x65, 0x6e, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x47,
	0x65, 0x6e, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x56, 0x43, 0x46,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x56, 0x43, 0x46, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x5f, 0x47, 0x54, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x47, 0x54, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x46, 0x49, 0x4c, 0x54,
	0x45, 0x52, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x69, 0x74, 0x65, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x69,
	0x74, 0x65, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x68, 0x0a, 0x33,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x47, 0x54, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x6d, 0x69, 0x6e, 0x5f, 0x50, 0x4c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x73, 0x70, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x47, 0x54, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x69, 0x6e, 0x50, 0x4c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x70, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x66,
	0x75, 0x6c, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x46,
	0x75, 0x6c, 0x6c, 0x12, 0x2b, 0x0a, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x08, 0x31, 0x30, 0x34, 0x38, 0x35,
	0x37, 0x36, 0x30, 0x52, 0x0b, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x51, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x76, 0x63, 0x66,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x21, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x56, 0x63, 0x66, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x54, 0x0a, 0x23, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x78, 0x66, 0x73, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x78, 0x66, 0x73, 0x4f, 0x70, 0x74, 0x69,
	0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x54, 0x0a, 0x23, 0x62, 0x79, 0x70,
	0x61, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x20, 0x62,
	0x79, 0x70, 0x61, 0x73, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12,
	0x3d, 0x0a, 0x0c, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73,
	0x64, 0x62, 0x5f, 0x70, 0x62, 0x2e, 0x53, 0x70, 0x61, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0b, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4c,
	0x0a, 0x11, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x65, 0x6e, 0x6f,
	0x6d, 0x69, 0x63, 0x73, 0x64, 0x62, 0x5f, 0x70, 0x62, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x10, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x16,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x05, 0x31, 0x30,
	0x32, 0x34, 0x30, 0x52, 0x14, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x42, 0x12, 0x0a, 0x10, 0x76, 0x69, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x16, 0x0a, 0x14, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x65,
	0x74, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x40,
	0x0a, 0x14, 0x6f, 0x72, 0x67, 0x2e, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73, 0x64, 0x62,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x1d, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x73,
	0x44, 0x42, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5a, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
}

var (
	file_genomicsdb_export_config_proto_rawDescOnce sync.Once
	file_genomicsdb_export_config_proto_rawDescData = file_genomicsdb_export_config_proto_rawDesc
)

func file_genomicsdb_export_config_proto_rawDescGZIP() []byte {
	file_genomicsdb_export_config_proto_rawDescOnce.Do(func() {
		file_genomicsdb_export_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_genomicsdb_export_config_proto_rawDescData)
	})
	return file_genomicsdb_export_config_proto_rawDescData
}

var file_genomicsdb_export_config_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_genomicsdb_export_config_proto_goTypes = []interface{}{
	(*GenomicsDBColumnOrIntervalList)(nil), // 0: genomicsdb_pb.GenomicsDBColumnOrIntervalList
	(*RowRange)(nil),                       // 1: genomicsdb_pb.RowRange
	(*RowRangeList)(nil),                   // 2: genomicsdb_pb.RowRangeList
	(*SparkConfig)(nil),                    // 3: genomicsdb_pb.SparkConfig
	(*AnnotationSource)(nil),               // 4: genomicsdb_pb.AnnotationSource
	(*ExportConfiguration)(nil),            // 5: genomicsdb_pb.ExportConfiguration
	(*GenomicsDBColumnOrInterval)(nil),     // 6: GenomicsDBColumnOrInterval
	(*ContigInterval)(nil),                 // 7: ContigInterval
	(*VidMappingPB)(nil),                   // 8: VidMappingPB
	(*CallsetMappingPB)(nil),               // 9: CallsetMappingPB
}
var file_genomicsdb_export_config_proto_depIdxs = []int32{
	6, // 0: genomicsdb_pb.GenomicsDBColumnOrIntervalList.column_or_interval_list:type_name -> GenomicsDBColumnOrInterval
	1, // 1: genomicsdb_pb.RowRangeList.range_list:type_name -> genomicsdb_pb.RowRange
	0, // 2: genomicsdb_pb.ExportConfiguration.query_column_ranges:type_name -> genomicsdb_pb.GenomicsDBColumnOrIntervalList
	7, // 3: genomicsdb_pb.ExportConfiguration.query_contig_intervals:type_name -> ContigInterval
	2, // 4: genomicsdb_pb.ExportConfiguration.query_row_ranges:type_name -> genomicsdb_pb.RowRangeList
	8, // 5: genomicsdb_pb.ExportConfiguration.vid_mapping:type_name -> VidMappingPB
	9, // 6: genomicsdb_pb.ExportConfiguration.callset_mapping:type_name -> CallsetMappingPB
	3, // 7: genomicsdb_pb.ExportConfiguration.spark_config:type_name -> genomicsdb_pb.SparkConfig
	4, // 8: genomicsdb_pb.ExportConfiguration.annotation_source:type_name -> genomicsdb_pb.AnnotationSource
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_genomicsdb_export_config_proto_init() }
func file_genomicsdb_export_config_proto_init() {
	if File_genomicsdb_export_config_proto != nil {
		return
	}
	file_genomicsdb_coordinates_proto_init()
	file_genomicsdb_vid_mapping_proto_init()
	file_genomicsdb_callsets_mapping_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_genomicsdb_export_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenomicsDBColumnOrIntervalList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_genomicsdb_export_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RowRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_genomicsdb_export_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RowRangeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_genomicsdb_export_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SparkConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_genomicsdb_export_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotationSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_genomicsdb_export_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_genomicsdb_export_config_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*ExportConfiguration_ArrayName)(nil),
		(*ExportConfiguration_GenerateArrayNameFromPartitionBounds)(nil),
		(*ExportConfiguration_VidMappingFile)(nil),
		(*ExportConfiguration_VidMapping)(nil),
		(*ExportConfiguration_CallsetMappingFile)(nil),
		(*ExportConfiguration_CallsetMapping)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_genomicsdb_export_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_genomicsdb_export_config_proto_goTypes,
		DependencyIndexes: file_genomicsdb_export_config_proto_depIdxs,
		MessageInfos:      file_genomicsdb_export_config_proto_msgTypes,
	}.Build()
	File_genomicsdb_export_config_proto = out.File
	file_genomicsdb_export_config_proto_rawDesc = nil
	file_genomicsdb_export_config_proto_goTypes = nil
	file_genomicsdb_export_config_proto_depIdxs = nil
}
